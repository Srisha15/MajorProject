//package com.E2DShare.filemngt.service;
//
//import jakarta.annotation.PostConstruct;
//import org.apache.pdfbox.pdmodel.PDDocument;
//import org.apache.pdfbox.text.PDFTextStripper;
//import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
//import org.apache.poi.xwpf.usermodel.XWPFDocument;
//import org.springframework.beans.factory.annotation.Value;
//import org.springframework.http.*;
//import org.springframework.stereotype.Component;
//import org.springframework.web.client.RestTemplate;
//import org.springframework.web.multipart.MultipartFile;
//
//import java.io.IOException;
//import java.io.InputStream;
//import java.security.MessageDigest;
//import java.util.*;
//import java.util.stream.Collectors;
//
//@Component
//public class AdvancedMalwareScanner implements MalwareScanner {
//
//    @Value("${google.safebrowsing.api.key}")
//    private String googleApiKey;
//
//    @Value("${virustotal.api.key}")
//    private String virusTotalApiKey;
//
//    private final RestTemplate restTemplate = new RestTemplate();
//
//    @Override
//    public boolean isFileClean(MultipartFile file) throws Exception {
//        String name = file.getOriginalFilename();
//        String mime = file.getContentType();
//        System.out.println("[MalwareScanner] ▶ Scanning file: " + name + " (type: " + mime + ")");
//
//        if (!isAllowedFileType(file)) {
//            System.out.println("[MalwareScanner] ❌ Rejected due to disallowed file type: " + name);
//            return false;
//        }
//        if (containsUnsafeUrls(file)) {
//            System.out.println("[MalwareScanner] ❌ Rejected: Unsafe URL detected in file");
//            return false;
//        }
//
//        String md5 = calculateFileHash(file.getInputStream());
//        if (isVirusTotalKnownMalware(md5)) {
//            System.out.println("[MalwareScanner] ❌ Rejected: Known malware hash match (MD5: " + md5 + ")");
//            return false;
//        }
//
//        if (containsMalwarePatterns(file)) {
//            System.out.println("[MalwareScanner] ❌ Rejected: Malware patterns found in file content");
//            return false;
//        }
//
//
//        System.out.println("[MalwareScanner] ✅ File '" + name + "' passed all checks.");
//        return true;
//    }
//
//
//    private boolean isAllowedFileType(MultipartFile file) {
//        String ext = Optional.ofNullable(file.getOriginalFilename())
//                .map(name -> name.substring(name.lastIndexOf('.') + 1).toLowerCase())
//                .orElse("");
//
//        return Set.of("png", "jpg", "jpeg", "pdf", "txt", "doc", "docx", "xlsx").contains(ext);
//    }
//
//
//    private String calculateFileHash(InputStream stream) throws Exception {
//        MessageDigest md5 = MessageDigest.getInstance("MD5");
//        byte[] buffer = new byte[8192];
//        int read;
//        while ((read = stream.read(buffer)) != -1) {
//            md5.update(buffer, 0, read);
//        }
//
//        StringBuilder sb = new StringBuilder();
//        for (byte b : md5.digest()) {
//            sb.append(String.format("%02x", b));
//        }
//        return sb.toString();
//    }
//
//    private boolean containsMalwarePatterns(MultipartFile file) throws IOException {
//        String content = new String(file.getBytes());
//
//        String fileName = file.getOriginalFilename();
//        if (fileName == null) return false;
//
//
//        String ext = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();
//        String text = "";
//
//        try (InputStream in = file.getInputStream()) {
//            if ("docx".equals(ext)) {
//                try (XWPFDocument doc = new XWPFDocument(in)) {
//                    text = new XWPFWordExtractor(doc).getText();
//                }
//            } else if ("pdf".equals(ext)) {
//                PDDocument pdf = PDDocument.load(in);
//                text = new PDFTextStripper().getText(pdf);
//                pdf.close();
//            } else {
//                text = new String(file.getBytes());
//            }
//        }
//
//        // Add stronger patterns
//        String[] patterns = {
//                "<script", "eval\\(", "document\\.write\\(", "base64,", "onerror=", "onload=", "iframe",
//                "powershell", "cmd.exe", "wget", "curl", "nc -e", "Invoke-Expression"
//        };
//
//        for (String pattern : patterns) {
//            if (content.toLowerCase().contains(pattern.toLowerCase())) {
//                System.out.println("[MalwareScanner] Match found for pattern: " + pattern);
//                return true;
//            }
//        }
//        return false;
//    }
//
//
//
//    private boolean containsUnsafeUrls(MultipartFile file) throws Exception {
//        String content = new String(file.getBytes());
//        Scanner scanner = new Scanner(content);
//
//        while (scanner.hasNext()) {
//            String word = scanner.next();
//            if (word.startsWith("http://") || word.startsWith("https://")) {
//                String url = word.replace("\"", "");
//                String apiUrl = "https://safebrowsing.googleapis.com/v4/threatMatches:find?key=" + googleApiKey;
//
//                String body = String.format("""
//                    {
//                      "client": {
//                        "clientId": "e2dshare-app",
//                        "clientVersion": "1.0"
//                      },
//                      "threatInfo": {
//                        "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING", "UNWANTED_SOFTWARE"],
//                        "platformTypes": ["ANY_PLATFORM"],
//                        "threatEntryTypes": ["URL"],
//                        "threatEntries": [
//                          {"url": "%s"}
//                        ]
//                      }
//                    }
//                """, url);
//
//                HttpHeaders headers = new HttpHeaders();
//                headers.setContentType(MediaType.APPLICATION_JSON);
//                HttpEntity<String> entity = new HttpEntity<>(body, headers);
//
//                ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, entity, String.class);
//                if (response.getBody() != null && !response.getBody().isBlank() && !response.getBody().equals("{}")) {
//                    return true;
//                }
//            }
//        }
//        return false;
//    }
//
//    private boolean isVirusTotalKnownMalware(String md5) {
//        String url = "https://www.virustotal.com/api/v3/files/" + md5;
//
//        HttpHeaders headers = new HttpHeaders();
//        headers.setBearerAuth(virusTotalApiKey);
//        headers.set("x-apikey", virusTotalApiKey);
//        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
//
//        try {
//            HttpEntity<Void> request = new HttpEntity<>(headers);
//            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, request, String.class);
//
//            return response.getBody() != null && response.getBody().contains("\"malicious\"");
//        } catch (Exception e) {
//            System.err.println("[VirusTotal] No Match Found: " + e.getMessage());
//            return false;
//        }
//    }
//}

// File: src/main/java/com/E2DShare/filemngt/service/AdvancedMalwareScanner.java

package com.E2DShare.filemngt.service;

import jakarta.annotation.PostConstruct;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.util.*;
import java.util.stream.Collectors;

@Component
public class AdvancedMalwareScanner implements MalwareScanner {

    @Value("${google.safebrowsing.api.key}")
    private String googleApiKey;

    @Value("${virustotal.api.key}")
    private String virusTotalApiKey;

    private final RestTemplate restTemplate = new RestTemplate();

    @Override
    public boolean isFileClean(MultipartFile file) throws Exception {
        String name = file.getOriginalFilename();
        String mime = file.getContentType();
        System.out.println("[MalwareScanner] ▶ Scanning file: " + name + " (type: " + mime + ")");

        if (!isAllowedFileType(file)) {
            System.out.println("[MalwareScanner] Rejected due to disallowed file type: " + name);
            return false;
        }
        if (containsUnsafeUrls(file)) {
            System.out.println("[MalwareScanner] Rejected: Unsafe URL detected in file");
            return false;
        }

        String md5 = calculateFileHash(file.getInputStream());
        if (isVirusTotalKnownMalware(md5)) {
            System.out.println("[MalwareScanner] Rejected: Known malware hash match (MD5: " + md5 + ")");
            return false;
        }

        if (containsMalwarePatterns(file)) {
            System.out.println("[MalwareScanner] Rejected: Malware patterns found in file content");
            return false;
        }

        System.out.println("[MalwareScanner] File '" + name + "' passed all checks.");
        return true;
    }

    private boolean isAllowedFileType(MultipartFile file) {
        String ext = Optional.ofNullable(file.getOriginalFilename())
                .map(name -> name.substring(name.lastIndexOf('.') + 1).toLowerCase())
                .orElse("");

        return Set.of("png", "jpg", "jpeg", "pdf", "txt", "doc", "docx", "xlsx").contains(ext);
    }

    private String calculateFileHash(InputStream stream) throws Exception {
        MessageDigest md5 = MessageDigest.getInstance("MD5");
        byte[] buffer = new byte[8192];
        int read;
        while ((read = stream.read(buffer)) != -1) {
            md5.update(buffer, 0, read);
        }

        StringBuilder sb = new StringBuilder();
        for (byte b : md5.digest()) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    private boolean containsMalwarePatterns(MultipartFile file) throws IOException {
        String fileName = file.getOriginalFilename();
        if (fileName == null) return false;

        String ext = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();
        String text = "";

        try (InputStream in = file.getInputStream()) {
            if ("docx".equals(ext)) {
                try (XWPFDocument doc = new XWPFDocument(in)) {
                    text = new XWPFWordExtractor(doc).getText();
                }
            } else if ("pdf".equals(ext)) {
                try (PDDocument pdf = PDDocument.load(in)) {
                    text = new PDFTextStripper().getText(pdf);
                }
            } else {
                text = new String(file.getBytes());
            }
        }

        String lowerText = text.toLowerCase();

        String[] patterns = {
                "eval(", "<script", "document.write(", "base64,", "onerror=", "onload=", "iframe",
                "powershell", "cmd.exe", "wget", "curl", "nc -e", "invoke-expression",
                "x5o!p%@ap[4\\pzx54(p^)7cc)7}$eicar-standard-antivirus-test-file!$h+h*" // EICAR
        };

        for (String pattern : patterns) {
            if (lowerText.contains(pattern.toLowerCase())) {
                System.out.println("[MalwareScanner] Match found for pattern: " + pattern);
                return true;
            }
        }
        return false;
    }

    private boolean containsUnsafeUrls(MultipartFile file) throws Exception {
        String content = new String(file.getBytes());
        Scanner scanner = new Scanner(content);

        while (scanner.hasNext()) {
            String word = scanner.next();
            if (word.startsWith("http://") || word.startsWith("https://")) {
                String url = word.replace("\"", "");
                String apiUrl = "https://safebrowsing.googleapis.com/v4/threatMatches:find?key=" + googleApiKey;

                String body = String.format("""
                    {
                      "client": {
                        "clientId": "e2dshare-app",
                        "clientVersion": "1.0"
                      },
                      "threatInfo": {
                        "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING", "UNWANTED_SOFTWARE"],
                        "platformTypes": ["ANY_PLATFORM"],
                        "threatEntryTypes": ["URL"],
                        "threatEntries": [
                          {"url": "%s"}
                        ]
                      }
                    }
                """, url);

                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);
                HttpEntity<String> entity = new HttpEntity<>(body, headers);

                ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, entity, String.class);
                if (response.getBody() != null && !response.getBody().isBlank() && !response.getBody().equals("{}")) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean isVirusTotalKnownMalware(String md5) {
        String url = "https://www.virustotal.com/api/v3/files/" + md5;

        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(virusTotalApiKey);
        headers.set("x-apikey", virusTotalApiKey);
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

        try {
            HttpEntity<Void> request = new HttpEntity<>(headers);
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, request, String.class);

            return response.getBody() != null && response.getBody().contains("\"malicious\"");
        } catch (Exception e) {
            System.err.println("[VirusTotal] No Match Found: " + e.getMessage());
            return false;
        }
    }
}

